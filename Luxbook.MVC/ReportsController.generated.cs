// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace Luxbook.MVC.Controllers
{
    public partial class ReportsController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected ReportsController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Monthly()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Monthly);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Pool()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Pool);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Type()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Type);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ReportsController Actions { get { return Mvc.Reports; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Reports";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Reports";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Monthly = "Monthly";
            public readonly string Pool = "Pool";
            public readonly string Type = "Type";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Monthly = "Monthly";
            public const string Pool = "Pool";
            public const string Type = "Type";
        }


        static readonly ActionParamsClass_Monthly s_params_Monthly = new ActionParamsClass_Monthly();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Monthly MonthlyParams { get { return s_params_Monthly; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Monthly
        {
            public readonly string parameter = "parameter";
        }
        static readonly ActionParamsClass_Pool s_params_Pool = new ActionParamsClass_Pool();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Pool PoolParams { get { return s_params_Pool; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Pool
        {
            public readonly string parameters = "parameters";
        }
        static readonly ActionParamsClass_Type s_params_Type = new ActionParamsClass_Type();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Type TypeParams { get { return s_params_Type; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Type
        {
            public readonly string parameters = "parameters";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string Monthly = "Monthly";
                public readonly string Pool = "Pool";
                public readonly string Type = "Type";
            }
            public readonly string Monthly = "~/Views/Reports/Monthly.cshtml";
            public readonly string Pool = "~/Views/Reports/Pool.cshtml";
            public readonly string Type = "~/Views/Reports/Type.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_ReportsController : Luxbook.MVC.Controllers.ReportsController
    {
        public T4MVC_ReportsController() : base(Dummy.Instance) { }

        [NonAction]
        partial void MonthlyOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Luxbook.MVC.Models.MonthlyReportParameter parameter);

        [NonAction]
        public override System.Web.Mvc.ActionResult Monthly(Luxbook.MVC.Models.MonthlyReportParameter parameter)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Monthly);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "parameter", parameter);
            MonthlyOverride(callInfo, parameter);
            return callInfo;
        }

        [NonAction]
        partial void PoolOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Luxbook.MVC.Models.PoolReportParameters parameters);

        [NonAction]
        public override System.Web.Mvc.ActionResult Pool(Luxbook.MVC.Models.PoolReportParameters parameters)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Pool);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "parameters", parameters);
            PoolOverride(callInfo, parameters);
            return callInfo;
        }

        [NonAction]
        partial void TypeOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Luxbook.MVC.Models.PoolReportParameters parameters);

        [NonAction]
        public override System.Web.Mvc.ActionResult Type(Luxbook.MVC.Models.PoolReportParameters parameters)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Type);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "parameters", parameters);
            TypeOverride(callInfo, parameters);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
