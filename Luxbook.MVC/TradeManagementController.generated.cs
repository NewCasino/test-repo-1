// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace Luxbook.MVC.Controllers
{
    public partial class TradeManagementController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected TradeManagementController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult EditAccount()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EditAccount);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.JsonResult DeleteAccount()
        {
            return new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.DeleteAccount);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.JsonResult ToggleTrade()
        {
            return new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.ToggleTrade);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public TradeManagementController Actions { get { return Mvc.TradeManagement; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "TradeManagement";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "TradeManagement";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Accounts = "Accounts";
            public readonly string GetAllAccounts = "GetAllAccounts";
            public readonly string EditAccount = "EditAccount";
            public readonly string AddAccount = "AddAccount";
            public readonly string DeleteAccount = "DeleteAccount";
            public readonly string ToggleTrade = "ToggleTrade";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Accounts = "Accounts";
            public const string GetAllAccounts = "GetAllAccounts";
            public const string EditAccount = "EditAccount";
            public const string AddAccount = "AddAccount";
            public const string DeleteAccount = "DeleteAccount";
            public const string ToggleTrade = "ToggleTrade";
        }


        static readonly ActionParamsClass_EditAccount s_params_EditAccount = new ActionParamsClass_EditAccount();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EditAccount EditAccountParams { get { return s_params_EditAccount; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EditAccount
        {
            public readonly string eventTradingAccountId = "eventTradingAccountId";
            public readonly string account = "account";
        }
        static readonly ActionParamsClass_AddAccount s_params_AddAccount = new ActionParamsClass_AddAccount();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddAccount AddAccountParams { get { return s_params_AddAccount; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddAccount
        {
            public readonly string viewModel = "viewModel";
        }
        static readonly ActionParamsClass_DeleteAccount s_params_DeleteAccount = new ActionParamsClass_DeleteAccount();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeleteAccount DeleteAccountParams { get { return s_params_DeleteAccount; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeleteAccount
        {
            public readonly string eventTradingAccountId = "eventTradingAccountId";
        }
        static readonly ActionParamsClass_ToggleTrade s_params_ToggleTrade = new ActionParamsClass_ToggleTrade();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ToggleTrade ToggleTradeParams { get { return s_params_ToggleTrade; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ToggleTrade
        {
            public readonly string tradeEnabled = "tradeEnabled";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string Accounts = "Accounts";
                public readonly string AddAccount = "AddAccount";
                public readonly string EditAccount = "EditAccount";
            }
            public readonly string Accounts = "~/Views/TradeManagement/Accounts.cshtml";
            public readonly string AddAccount = "~/Views/TradeManagement/AddAccount.cshtml";
            public readonly string EditAccount = "~/Views/TradeManagement/EditAccount.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_TradeManagementController : Luxbook.MVC.Controllers.TradeManagementController
    {
        public T4MVC_TradeManagementController() : base(Dummy.Instance) { }

        [NonAction]
        partial void AccountsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Accounts()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Accounts);
            AccountsOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void GetAllAccountsOverride(T4MVC_System_Web_Mvc_JsonResult callInfo);

        [NonAction]
        public override System.Web.Mvc.JsonResult GetAllAccounts()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetAllAccounts);
            GetAllAccountsOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void EditAccountOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int eventTradingAccountId);

        [NonAction]
        public override System.Web.Mvc.ActionResult EditAccount(int eventTradingAccountId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EditAccount);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "eventTradingAccountId", eventTradingAccountId);
            EditAccountOverride(callInfo, eventTradingAccountId);
            return callInfo;
        }

        [NonAction]
        partial void EditAccountOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, Trading.Library.Models.TradingAccount account);

        [NonAction]
        public override System.Web.Mvc.JsonResult EditAccount(Trading.Library.Models.TradingAccount account)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.EditAccount);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "account", account);
            EditAccountOverride(callInfo, account);
            return callInfo;
        }

        [NonAction]
        partial void AddAccountOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult AddAccount()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddAccount);
            AddAccountOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void AddAccountOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, Trading.Library.Models.TradingAccount viewModel);

        [NonAction]
        public override System.Web.Mvc.JsonResult AddAccount(Trading.Library.Models.TradingAccount viewModel)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.AddAccount);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "viewModel", viewModel);
            AddAccountOverride(callInfo, viewModel);
            return callInfo;
        }

        [NonAction]
        partial void DeleteAccountOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int eventTradingAccountId);

        [NonAction]
        public override System.Web.Mvc.JsonResult DeleteAccount(int eventTradingAccountId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.DeleteAccount);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "eventTradingAccountId", eventTradingAccountId);
            DeleteAccountOverride(callInfo, eventTradingAccountId);
            return callInfo;
        }

        [NonAction]
        partial void ToggleTradeOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, bool tradeEnabled);

        [NonAction]
        public override System.Web.Mvc.JsonResult ToggleTrade(bool tradeEnabled)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.ToggleTrade);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "tradeEnabled", tradeEnabled);
            ToggleTradeOverride(callInfo, tradeEnabled);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
